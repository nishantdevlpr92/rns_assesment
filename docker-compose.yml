version: '3.8'

services:
  web:
    tty: true
    stdin_open: true
    build:
      context: ./rns_backend
      dockerfile: Dockerfile
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - ./rns_backend/:/app/
    ports:
      - "8000:8000"
    depends_on:
      - db
      - redis
    env_file:
      - .env

  db:
    image: postgres:latest
    environment:
      POSTGRES_DB: postgres_db_name
      POSTGRES_USER: postgres_user
      POSTGRES_PASSWORD: postgres_password
    volumes:
      - postgres_data:/var/lib/postgresql/data/

  worker:
    restart: always
    build:
      context: ./rns_backend
      dockerfile: Dockerfile
    command: celery -A rns_backend worker -l info
    volumes:
      - .:/code
    depends_on:
      - db
      - redis
    env_file:
      - .env

  beat:
    restart: always
    build:
      context: ./rns_backend
      dockerfile: Dockerfile
    command: celery -A rns_backend beat -l info
    volumes:
      - .:/code
    depends_on:
      - db
      - redis
    env_file:
      - .env

  redis:
    image: redis:latest
    ports:
      - '6379:6379'

  frontend:
    container_name: frontend-dev
    build: ./frontend/scrapper
    command: npm start
    volumes:
      - ./frontend/scrapper/:/app/
    ports:
      - 3000:3000

volumes:
  postgres_data:
